//make queue of visited locs.
//modification to map.h
__________________________________
typedef struct connNode *ConnList; 
Struct connNode {
	PlaceId p;
	TransportType type;
	ConnList next; (same as connNode *next)
	ConnList head;                        <–––––-–– modified connNode struct in Map.h
	ConnList tail;          
};
__________________________________

//make new queue
ConnList newQueue (void) {
	ConnList *new = malloc(sizeof( *new));
	new->head = NULL; 
	new->tail = NULL;
	return new;
}

//add to back of queue. 
Void QueueJoin (ConnList Q, PlaceId value) {
	assert (Q != NULL);
	ConnNode *new = malloc (sizeof *new);
	assert (new != NULL);
	new->value = value; 
	new->next = NULL;
	if (Q->head == NULL) {
		Q->head = new;
	}
	if (Q->tail != NULL) {
		Q->tail->next = new;
	}
	Q->tail = new;
}

// remove item from front of Queue
PlaceId QueueLeave (ConnList Q)
{
	assert (Q != NULL);
	assert (Q->head != NULL);
	PlaceId value = Q->head->value;
	connNode *prev = Q->head;
	Q->head = prev->next;
	if (Q->head == NULL)
		Q->tail = NULL;
	free (prev);
	return value;
}
	
// check for no items
int QueueIsEmpty (ConnList Q)
{
	return (Q->head == NULL);
}

// check that the Queue does not have given item
int IsNotInQueue (ConnList Q, PlaceId p)
{
while (Q != NULL) {
	if (Q->PlaceID != p) {
		Q = Q->next;
	} else {
	return -1;
}
return 1;
}
