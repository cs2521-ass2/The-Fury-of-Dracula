#include Queue.h

PlaceId *HvGetShortestPathTo(HunterView hv, Player hunter, PlaceId dest, int *pathLength){

    PlaceId src = GvGetPlayerLocation(hv->gv, hunter);
    int Max = PlaceId placeNameToId(Zurich);

      //make a visited Queue
    ConnList ToVisit = newQueue ();

      //make a 2D array of paths and set all values to -1
    PlaceId PathsVisited[Max][Max]; 
    for (i=0;i <=Max; i++){
        for(j=0; j<=Max; j++){
            PathsVisited[i][j] = -1;
        }
    }  
    PathsVisited[src][src] = src; 
    QueueJoin (ToVisit, src);

      //Keep dequeuing (and enqueuing) to find destination
    while (!QueueIsEmpty(ToVisit)) {
    PlaceId head = QueueLeave(ToVisit); 
    if (head == dest) {
        for(int i=0;i<=Max && PathsVisited[head][i] != -1; i++);
        *pathLength = i;
    return &PathsVisited[head];
    }
    ConnList adjacents = MapGetConnections(Map m, head);    <----- Calling function with outside parameters. Am I supposed to use GvGetReachable instead? 
    while (adjacents->next != NULL) {
          // it is not visited
        if (IsNotInQueue (ToVisit, adjacents->p) == 1){
              //add to the Queue
            QueueJoin(ToVisit, adjacents->p);
        } else {
              adjacents = adjacents->next;
        }
            //Add the paths from source to the adjacent vertices:
        for (int j=0; PathsVisited[head][j] != -1; j++) {
            PathsVisited[head][j] = PathsVisited[adjacents->p][j];
            PathsVisited[adjacents->p][j+1]=adjacents->p;
        }
        return NULL;
    }
}





